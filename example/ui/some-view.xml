<?xml version="1.0" encoding="UTF-8"?>
<UI><!--name of root elem can be any-->
  <!--Here, Bitmap, Assets, CENTER is imported in SomeView.hx(the macro building class)-->
  <!--Name of 1-level xml node (here is Bitmap) is the haxe class name. It must be a DisplayObject sub-class.
    An instance of this class will be create, init, then add as child
      of the building class object in `initUI()` macro-generated function.-->
  <!--XML attribute name is property of the instance. It can be any haxe expression -->
  <!--Special attributes:
   (note that the name of those attr is reversed word, so it will not conflict with normal property names)
    1. var="someName":
      + If Node has `var` attribute then a variable with name "someName" will be created for the building class.
      + Else, the instance will be created as a local variable in initUI function
    2. new="some expression has return type compatible with the node class name":
      + If Node do not have `new` attr then the instance is create using no-args constructor. -->
  <Bitmap var="bmp"
          new="new Bitmap(Assets.getBitmapData('img/sd.jpg'))"
          y="1 + 2" />
          
  <!--Here:
     + `PADDING` is the static var of the building class.
     + `shouldEnableTxt` is the method of the building class.
     + `bmp` is the variable of the building class,
        which is generated by tinyui's UIMacro because the above `var="bmp"` attribute of Bitmap node. -->
  <!--You can see that there is NO trick in tinyui!:
     All attribute value in xml file is just haxe expression
        that is eval - then can contains anything exist in the eval scope ( `initUI()` function ).
     Ex, in <defaultTextFormat> node below, attribute `font="'Tahoma'"` has value 'Tahoma' - which is a String const.
        If you omit the (') chars, then haxe compiler will report error that identifier Tahoma is not exist! -->
  <TextField y="bmp.y + bmp.height + PADDING"
             mouseEnabled="shouldEnableTxt()" >
    <!--The nested (2+ level) xml node set values for properties of a nested property
      of the DisplayObject instance (here is the TextField) -->
      <!--The <TextFormat> nested node below can be declared as attributes of its parent node as:
        <TextField defaultTextFormat.size="18"...>
      But, because TextField.get_defaultTextFormat() return a cloned TextFormat
      then set someTextField.defaultTextFormat.size=18 will have NO effect!
      This is limit (or feature :D) of language, NOT of tinyui!-->
      <!--The `var` attribute here is used as the nested var of TextField (parent node),
      not have same meaning as the `var` attribute of 1-level xml node (in which, `var` is used to declare an instance variable of the building class) -->
    <TextFormat var="defaultTextFormat" size="18" font="'Tahoma'" align="CENTER" color="0xFF0000" />
    <String new="'sandinh.com'" var="text" />
  </TextField>
  
  <TextField text="'Hello TinyUI'">
    <!--another special attribute is `function`.. you guess the meaning :D -->  
    <TextFormat function="setTextFormat" size="18" font="'Tahoma'" align="CENTER" color="0xFF0000" />
  </TextField>
</UI>