<UI var.fmt1="new TextFormat('Tahoma', 22, 0xFFFF00)"
    var.fmt2="new TextFormat('Tahoma', 12, 0xFF0000)">
    <Bitmap var="#bmp1" this.src="'img/sd.jpg'" />
    <TextField var="txt1" border="true" borderColor="0xFF0000" x="bmp1.width" autoSize="TextFieldAutoSize.LEFT" />
    <TextField var="#txt2" border="true" borderColor="0xFF0000" x="bmp1.width + 200" />
    <!--declare modes (states) of View by adding some `mode.modeName` nodes (direct child of root node).
        TinyUI will add some fields to the View class:
            public var uiMode(default, set): String;
            var _set_uiMode : String -> Void;
            function set_uiMode(mode:String):String {
              .. some validate
              if (mode != uiMode) {
                _set_uiMode(mode);
                uiMode = mode;
              }
              return mode;
            }
        And init _set_uiMode at the end of initUI method:
            this._set_uiMode = function(uiNewMode:String) {
              switch (uiNewMode) {
                case "modeName1": ..
                case "modeName2": ..
                ..
                default: throw ..
              }
            }
        Also: if mode node has attribute `default="true"` then TinyUI will add expression `this.uiMode = modeName;` to the end of initUI method
        (should only one mode node be set default. If multi then the last one will be used).
        
        Note: _set_uiMode is a closure inside initUI, so in mode nodes, we can reference to
            + all local variables that is set in UI (see example local-var.xml)
            + all initUI arguments (see example initUI-args.xml)-->
    <mode.M1 default="true">
        <!--direct children of mode node can:
            + set properties for view: <this vars/>
            + call method (or extension method) of view: <this. methods /> or <this.fnName ..>
            + declare changes for ViewItem by adding node with name is var name of the item:
              - var field (see example declare-var.xml)
              - or view item local var name (see the correspond example)
              Note: view item local var name INSIDE a for-loop is not support (see example for-loop.xml).
            + declare changes for multiple view items by <in> node -->
        <in var="txt1,txt2" y="100" type="DYNAMIC" this.setTextFormat="fmt1" />
        <txt1 text="'txt1 in mode 1'" />
        <txt2 text="'txt2 in mode 1'" />
        <bmp1 scaleX="0.5" scaleY="0.5" />
    </mode.M1>
    <mode.M2>
        <in var="txt1,txt2" y="0" type="INPUT" defaultTextFormat="fmt2" this.setTextFormat="fmt2" />
        <txt1 text="'txt1 in mode 2'" />
        <txt2 text="'txt2 in mode 2'" />
        <bmp1 scaleX="1" scaleY="1" />
    </mode.M2>
</UI>